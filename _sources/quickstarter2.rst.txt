Welcome to the cerf quickstarter!
=================================

``cerf`` is an open-source geospatial Python package for evaluating and analyzing future electricity technology capacity expansion feasibility.
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Purpose
-------

``cerf`` was created to:

-  Evaluate the feasibility of a future scenario-driven electricity
   technology capacity expansion plan as generated by a parent model,

-  Site power plants in the least cost configuration when considering
   regional economics an on-the-ground barriers to siting,

-  Assist planners and modelers of alternate future realizations of the
   electricity system to gain an understanding of how siting costs and
   service area congestion may respond under certain stressors.

A brief introduction
--------------------

The Capacity Expansion Regional Feasibility package (``cerf``) helps us
evaluate the feasibility and structure of future electricity capacity
expansion plans by siting power plants in areas that have been deemed
the least cost option. We can use ``cerf`` to gain an understanding of
topics such as: 1) whether or not future projected electricity expansion
plans from models such as GCAM are possible to achieve, 2) where
suitability (e.g., cooling water availability) may influence our ability
to achieve certain expansions, and/or 3) how power plant infrastructure
build outs and value may evolve into the future when considering
locational marginal pricing from a grid operations model.

``cerf`` currently operates at a 1 km2 resolution over the conterminous
United States. Each grid cell is given an initial value of suitable (0)
or unsuitable (1) based on a collection of suitability criteria gleaned
from the literature. ``cerf``\ â€™s default suitability layers include
both those that are common to all thermal technologies as well as
technology-specific suitability criteria. Common suitability layers
represent categories such as protected lands, critical habitat areas,
and much more. Technology-specific suitability layers are those that
satisfy requirements that may not be applicable to all technologies. An
example would be minimum mean annual flow requirements for cooling water
availability for individual thermal technologies.

We introduce a metric named Net Locational Cost (NLC) that is used
compete power plant technologies for each grid cell based on the least
cost option to site. NLC is calculated by subtracting the Net Operating
Value (NOV) of a proposed power plant from the cost of its
interconnection to the grid to represent the potential deployment value.
Both the NOV parameter which incorporates many technology-specific
values such as variable operations and maintenance costs, carbon price,
heat rate, etc. and the interconnection cost parameter used for both
electricity transmission and gas pipelines are configurable per time
step. All equations used in ``cerf`` are described in detail in the
`documentation <https://immm-sfa.github.io/cerf/user_guide.html#fundamental-equations-and-concepts>`__.

Load packages
-------------

.. code:: ipython3

    import cerf


Conduct a run with CERF
-----------------------

We will be exploring the main functionality of the ``cerf`` package
using our built-in data which is meant for illustrative purposes only.
``cerf`` runs using a single YAML configuration file that contains
project and technology-specific settings, an electricity capacity
expansion plan, and lmp zones pricing data which is described in detail
in the docs `here <https://immm-sfa.github.io/cerf/>`__. Expansion plans
and technology data are generally generated by models such as GCAM-USA
which capture multi-sector dynamics that represent alternate futures
based on scenario assumptions for socioeconomics, radiative forcing,
etc. The ``cerf`` package also utilizes power plant siting suitability
data at a 1km resolution over the CONUS, publically available data from
EIA and HIFLD for transmission and pipeline infrastructure, and 8760
locational marginal pricing from your prefered grid operations model.

Get up and running right away!
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1. Run ``cerf`` to site power plants in an expansion plan for a single year for the CONUS
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. code:: ipython3

    # sample year
    yr = 2030
    
    # load the sample configuration file path for the target year
    config_file = cerf.config_file(yr)
    
    # run the configuration for the target year and return a data frame
    result_df = cerf.run(config_file, write_output=False)



.. parsed-literal::

    2021-08-11 16:44:35,907 - root - INFO - Starting CERF model
    2021-08-11 16:44:36,128 - root - INFO - Staging data...
    2021-08-11 16:44:36,348 - root - INFO - Using 'zones_raster_file':  /Users/d3y010/repos/github/cerf/cerf/data/lmp_zones_1km.img
    2021-08-11 16:44:36,386 - root - INFO - Processing locational marginal pricing (LMP)
    2021-08-11 16:44:36,386 - root - INFO - Using LMP from default illustrative package data:  /Users/d3y010/repos/github/cerf/cerf/data/illustrative_lmp_8760-per-zone_dollars-per-mwh.zip
    2021-08-11 16:44:46,018 - root - INFO - Calculating interconnection costs (IC)
    2021-08-11 16:44:46,019 - root - INFO - Using default substations costs from file: /Users/d3y010/repos/github/cerf/cerf/data/costs_per_kv_substation.yml
    2021-08-11 16:44:46,022 - root - INFO - Using default substation file: /Users/d3y010/repos/github/cerf/cerf/data/hifld_substations_conus_albers.zip
    2021-08-11 16:44:55,374 - root - INFO - Using default gas pipeline file:  /Users/d3y010/repos/github/cerf/cerf/data/eia_natural_gas_pipelines_conus_albers.zip
    2021-08-11 16:44:56,594 - root - INFO - Using gas pipeline costs from default file:  /Users/d3y010/repos/github/cerf/cerf/data/costs_gas_pipeline.yml
    2021-08-11 16:45:04,450 - root - INFO - Calculating net operational cost (NOV)
    2021-08-11 16:45:05,610 - root - INFO - Calculating net locational cost (NLC)
    2021-08-11 16:45:06,142 - root - INFO - Building suitability array
    2021-08-11 16:45:06,561 - root - INFO - Using suitability file for 'biomass_conv_wo_ccs':  /Users/d3y010/repos/github/cerf/cerf/data/suitability_biomass.sdat
    2021-08-11 16:45:06,597 - root - INFO - Using suitability file for 'biomass_igcc_wo_ccs':  /Users/d3y010/repos/github/cerf/cerf/data/suitability_biomass_igcc.sdat
    2021-08-11 16:45:06,631 - root - INFO - Using suitability file for 'coal_conv_pul_wo_ccs':  /Users/d3y010/repos/github/cerf/cerf/data/suitability_coal.sdat
    2021-08-11 16:45:06,660 - root - INFO - Using suitability file for 'gas_cc_wo_ccs':  /Users/d3y010/repos/github/cerf/cerf/data/suitability_gas_cc.sdat
    2021-08-11 16:45:06,689 - root - INFO - Using suitability file for 'gas_cc_w_ccs':  /Users/d3y010/repos/github/cerf/cerf/data/suitability_gas_cc_ccs.sdat
    2021-08-11 16:45:06,717 - root - INFO - Using suitability file for 'nuclear_gen_ii':  /Users/d3y010/repos/github/cerf/cerf/data/suitability_nuclear.sdat
    2021-08-11 16:45:06,747 - root - INFO - Using suitability file for 'nuclear_gen_iii':  /Users/d3y010/repos/github/cerf/cerf/data/suitability_nuclear.sdat
    2021-08-11 16:45:06,774 - root - INFO - Using suitability file for 'oil_ct_wo_ccs':  /Users/d3y010/repos/github/cerf/cerf/data/suitability_oil_baseload.sdat
    2021-08-11 16:45:06,801 - root - INFO - Using suitability file for 'solar_csp':  /Users/d3y010/repos/github/cerf/cerf/data/suitability_solar.sdat
    2021-08-11 16:45:06,828 - root - INFO - Using suitability file for 'solar_pv_non_dist':  /Users/d3y010/repos/github/cerf/cerf/data/suitability_solar.sdat
    2021-08-11 16:45:06,857 - root - INFO - Using suitability file for 'wind_onshore':  /Users/d3y010/repos/github/cerf/cerf/data/suitability_wind.sdat
    2021-08-11 16:45:06,884 - root - INFO - Staged data in 30.7558887 seconds
    2021-08-11 16:45:07,908 - root - INFO - Processed `alabama` in 1.0231931 seconds
    2021-08-11 16:45:09,228 - root - INFO - Processed `arizona` in 1.3189287 seconds
    2021-08-11 16:45:09,756 - root - INFO - Processed `arkansas` in 0.5270271 seconds
    2021-08-11 16:45:14,008 - root - INFO - Processed `california` in 4.2520022 seconds
    2021-08-11 16:45:14,716 - root - INFO - Processed `colorado` in 0.706486 seconds
    2021-08-11 16:45:14,863 - root - INFO - Processed `connecticut` in 0.1462779 seconds
    2021-08-11 16:45:14,946 - root - INFO - Processed `delaware` in 0.0821531 seconds
    2021-08-11 16:45:15,020 - root - INFO - Processed `district_of_columbia` in 0.073612 seconds
    2021-08-11 16:45:16,680 - root - INFO - Processed `florida` in 1.6592171 seconds
    2021-08-11 16:45:17,598 - root - INFO - Processed `georgia` in 0.9176869 seconds
    2021-08-11 16:45:18,174 - root - INFO - Processed `idaho` in 0.574789 seconds
    2021-08-11 16:45:19,028 - root - INFO - Processed `illinois` in 0.853694 seconds
    2021-08-11 16:45:19,416 - root - INFO - Processed `indiana` in 0.3873949 seconds
    2021-08-11 16:45:20,021 - root - INFO - Processed `iowa` in 0.6044884 seconds
    2021-08-11 16:45:20,541 - root - INFO - Processed `kansas` in 0.5192442 seconds
    2021-08-11 16:45:20,998 - root - INFO - Processed `kentucky` in 0.4557009 seconds
    2021-08-11 16:45:21,804 - root - INFO - Processed `louisiana` in 0.805455 seconds
    2021-08-11 16:45:22,070 - root - INFO - Processed `maine` in 0.2656841 seconds
    2021-08-11 16:45:22,288 - root - INFO - Processed `maryland` in 0.2168839 seconds
    2021-08-11 16:45:22,463 - root - INFO - Processed `massachusetts` in 0.1739771 seconds
    2021-08-11 16:45:23,448 - root - INFO - Processed `michigan` in 0.9846289 seconds
    2021-08-11 16:45:24,232 - root - INFO - Processed `minnesota` in 0.7831929 seconds
    2021-08-11 16:45:24,859 - root - INFO - Processed `mississippi` in 0.6265438 seconds
    2021-08-11 16:45:25,570 - root - INFO - Processed `missouri` in 0.7099049 seconds
    2021-08-11 16:45:26,387 - root - INFO - Processed `montana` in 0.8161809 seconds
    2021-08-11 16:45:26,757 - root - INFO - Processed `nebraska` in 0.3701129 seconds
    2021-08-11 16:45:27,774 - root - INFO - Processed `nevada` in 1.01583 seconds
    2021-08-11 16:45:27,941 - root - INFO - Processed `new_hampshire` in 0.1660187 seconds
    2021-08-11 16:45:28,137 - root - INFO - Processed `new_jersey` in 0.1957922 seconds
    2021-08-11 16:45:28,778 - root - INFO - Processed `new_mexico` in 0.640183 seconds
    2021-08-11 16:45:29,673 - root - INFO - Processed `new_york` in 0.894026 seconds
    2021-08-11 16:45:30,361 - root - INFO - Processed `north_carolina` in 0.6876791 seconds
    2021-08-11 16:45:30,738 - root - INFO - Processed `north_dakota` in 0.3766301 seconds
    2021-08-11 16:45:31,283 - root - INFO - Processed `ohio` in 0.5435967 seconds
    2021-08-11 16:45:32,156 - root - INFO - Processed `oklahoma` in 0.8723531 seconds
    2021-08-11 16:45:32,909 - root - INFO - Processed `oregon` in 0.752351 seconds
    2021-08-11 16:45:33,625 - root - INFO - Processed `pennsylvania` in 0.715596 seconds
    2021-08-11 16:45:33,700 - root - INFO - Processed `rhode_island` in 0.074075 seconds
    2021-08-11 16:45:34,133 - root - INFO - Processed `south_carolina` in 0.432246 seconds
    2021-08-11 16:45:34,477 - root - INFO - Processed `south_dakota` in 0.3435099 seconds
    2021-08-11 16:45:34,891 - root - INFO - Processed `tennessee` in 0.4133101 seconds
    2021-08-11 16:45:46,752 - root - INFO - Processed `texas` in 11.859777 seconds
    2021-08-11 16:45:47,379 - root - INFO - Processed `utah` in 0.6265898 seconds
    2021-08-11 16:45:47,496 - root - INFO - Processed `vermont` in 0.1157219 seconds
    2021-08-11 16:45:48,114 - root - INFO - Processed `virginia` in 0.6173577 seconds
    2021-08-11 16:45:48,587 - root - INFO - Processed `washington` in 0.472501 seconds
    2021-08-11 16:45:48,876 - root - INFO - Processed `west_virginia` in 0.2880208 seconds
    2021-08-11 16:45:49,397 - root - INFO - Processed `wisconsin` in 0.521013 seconds
    2021-08-11 16:45:49,979 - root - INFO - Processed `wyoming` in 0.5813661 seconds
    2021-08-11 16:45:49,980 - root - INFO - All states processed in 43.0950482 seconds.
    2021-08-11 16:45:49,980 - root - INFO - Aggregating outputs...
    2021-08-11 16:45:50,387 - root - INFO - CERF model run completed in 74.4805849 seconds


``cerf`` results are returned as a Pandas DataFrame
'''''''''''''''''''''''''''''''''''''''''''''''''''

Each record is a sited power plant having a geographic location and
other siting attributes. Reminder: ``cerf`` uses the
USA_Contiguous_Albers_Equal_Area_Conic projected coordinate reference
system, so the ``xcoord`` and ``ycoord`` are relative to that
projection.

.. code:: ipython3

    result_df.head()

2. Run ``cerf`` to site power plants in an expansion plan for multiple years for the CONUS
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

This exercise demonstrates how to inherit sites from a previous yearâ€™s
results and keep them in the mix if they have not yet reached
retirement. If this is done in ``cerf``, users should ensure that their
expansion plan is only for new vintage each timestep.

.. code:: ipython3

    import cerf
    
    # process year 2010, 2030, and 2050
    for index, yr in enumerate([2010, 2030, 2050]):
    
        print(f"\nProcessing year:  {yr}")
    
        # load the sample configuration file path for the target year
        config_file = cerf.config_file(yr)
    
        # do not intialize the run with previously sited data if it is the first time step
        if index == 0:
            result_df = cerf.run(config_file, write_output=False)
    
        else:
            result_df = cerf.run(config_file, write_output=False, initialize_site_data=result_df)


Explore the results that account for retirement
'''''''''''''''''''''''''''''''''''''''''''''''

Since we inherited the each year, and we are only siting new vintage per
year, we see power plants from multiple technlogies until they reach
their retirement age. We can narrow in on ``biomass`` power plants in
Virginia to see this:

.. code:: ipython3

    result_df.loc[(result_df['state_name'] == 'virginia') & (result_df['tech_id'] == 9)]


Plot the output
'''''''''''''''

.. code:: ipython3

    cerf.plot_siting(result_df)

